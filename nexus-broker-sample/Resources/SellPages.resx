<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="RequestReturnButtonConfirm" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="RequestReturnFail" xml:space="preserve">
    <value>This transaction has already been returned or is no longer valid.</value>
  </data>
  <data name="RequestReturnFormText" xml:space="preserve">
    <value>Please select the {0} address to receive your {0} back and click the confirm button:</value>
  </data>
  <data name="RequestReturnInfo1" xml:space="preserve">
    <value>The automatically selected {0} address to receive your {0} back is the one connected to the account that you used to sell the {0}. Alternatively you can select a {0} address from one of your other active accounts if you have more than one.</value>
  </data>
  <data name="RequestReturnInfo2a" xml:space="preserve">
    <value>If you want to receive your {0} back on yet another {0} address, you can create an</value>
  </data>
  <data name="RequestReturnInfo2b" xml:space="preserve">
    <value>Account with a new {0} address first, and reopen this page with the link in your email.</value>
  </data>
  <data name="RequestReturnReason" xml:space="preserve">
    <value>Returning reason:</value>
  </data>
  <data name="RequestReturnSuccessInfo1" xml:space="preserve">
    <value>Your {0} return addres has been successful confirmed. After 6 blockchain confirmations you will receive your {0} back.</value>
  </data>
  <data name="RequestReturnSuccessTitle" xml:space="preserve">
    <value>Confirmed {0} return address</value>
  </data>
  <data name="RequestReturnTitle" xml:space="preserve">
    <value>Returning your {0}</value>
  </data>
  <data name="SELLERRORCODE001" xml:space="preserve">
    <value>Selling of {0} temporary not available</value>
  </data>
  <data name="SELLERRORCODE002" xml:space="preserve">
    <value>Account unknown or not active</value>
  </data>
  <data name="SELLERRORCODE003" xml:space="preserve">
    <value>The daily or monthly sell limit of this account has been reached</value>
  </data>
  <data name="SELLERRORCODE004" xml:space="preserve">
    <value>Sell transaction size too small</value>
  </data>
  <data name="SELLERRORCODE005" xml:space="preserve">
    <value>No {0} sell method available for this account</value>
  </data>
  <data name="SELLERRORCODE006" xml:space="preserve">
    <value>The exchange service is temporary not active, please try again</value>
  </data>
  <data name="SELLERRORCODE007" xml:space="preserve">
    <value>The exchange service is temporary not active, please try again</value>
  </data>
  <data name="SELLERRORCODE008" xml:space="preserve">
    <value>The exchange service is temporary not active, please try again</value>
  </data>
  <data name="SELLERRORCODE009" xml:space="preserve">
    <value>Transaction currently not possible, selling transactions have been disabled</value>
  </data>
  <data name="SELLERRORCODE010" xml:space="preserve">
    <value>Could not save transaction</value>
  </data>
  <data name="SellFormAccountLabel" xml:space="preserve">
    <value>Account code</value>
  </data>
  <data name="SellFormAccountPlaceHolder" xml:space="preserve">
    <value>Your Account code</value>
  </data>
  <data name="SellFormAmountLabel" xml:space="preserve">
    <value>Amount</value>
  </data>
  <data name="SellFormBankFeeLabel" xml:space="preserve">
    <value>Bank fee</value>
  </data>
  <data name="SellFormCheckAccountButton" xml:space="preserve">
    <value>Check</value>
  </data>
  <data name="SellFormLimitedBusinessMessage" xml:space="preserve">
    <value>Limited business account</value>
  </data>
  <data name="SellFormLimitedInfoLink" xml:space="preserve">
    <value>Why is this account limited?</value>
  </data>
  <data name="SellFormLimitedPersonalMessage" xml:space="preserve">
    <value>Limited personal account</value>
  </data>
  <data name="SellFormNeedVerificationLink" xml:space="preserve">
    <value>Need verification?</value>
  </data>
  <data name="SellFormNewBusiness" xml:space="preserve">
    <value>Unverified business account.</value>
  </data>
  <data name="SellFormNewBusinessMessage" xml:space="preserve">
    <value>New business account</value>
  </data>
  <data name="SellFormNewPersonal" xml:space="preserve">
    <value>New personal account.</value>
  </data>
  <data name="SellFormNoActiveAccountLink" xml:space="preserve">
    <value>No code?</value>
  </data>
  <data name="SellFormNotActiveAccount" xml:space="preserve">
    <value>Not an active account!</value>
  </data>
  <data name="SellFormPayoutLabel" xml:space="preserve">
    <value>Payout</value>
  </data>
  <data name="SellFormReviewButton" xml:space="preserve">
    <value>Review order</value>
  </data>
  <data name="SellFormServiceFeeLabel" xml:space="preserve">
    <value>Service fee</value>
  </data>
  <data name="SellFormStatusNotice1" xml:space="preserve">
    <value>&lt;h4&gt;Welcome to HERMES!&lt;/h4&gt;
    Before you can start to sell {0}, you first need to complete a small test buy transaction. This is to verify your banking details.</value>
  </data>
  <data name="SellFormStatusNotice2" xml:space="preserve">
    <value>You have successfully completed your first buy transaction. As soon as your payment arrives on our bank account you can start to sell {0}. This will typically take one working-day. Thanks for your understanding.</value>
  </data>
  <data name="SellFormStatusNotice3" xml:space="preserve">
    <value>Before you can start to sell {0}, you first need to upload your FotoID. After it has been checked you can start selling {0}. This will typically take one working-day. Thanks for your understanding.</value>
  </data>
  <data name="SellFormSubTotalLabel" xml:space="preserve">
    <value>Subtotal</value>
  </data>
  <data name="SellFormTrustedPersonal" xml:space="preserve">
    <value>Trusted personal account.</value>
  </data>
  <data name="SellFormTrustedPersonalMessage" xml:space="preserve">
    <value>Trusted personal account</value>
  </data>
  <data name="SellFormVerifiedBusiness" xml:space="preserve">
    <value>Verified business account.</value>
  </data>
  <data name="SellFormVerifiedPersonal" xml:space="preserve">
    <value>Verified personal account.</value>
  </data>
  <data name="SellFormWrongCoinAccount" xml:space="preserve">
    <value>Please enter a valid {0} account</value>
  </data>
  <data name="SellingPrice" xml:space="preserve">
    <value>Selling price</value>
  </data>
  <data name="SellInitiateAccountBank" xml:space="preserve">
    <value>Bank account:</value>
  </data>
  <data name="SellInitiateAccountCode" xml:space="preserve">
    <value>Account code:</value>
  </data>
  <data name="SellInitiateAccountEmail" xml:space="preserve">
    <value>Email address:</value>
  </data>
  <data name="SellInitiateAccountTitle" xml:space="preserve">
    <value>Account details</value>
  </data>
  <data name="SellInitiateLumenWarning" xml:space="preserve">
    <value>Attention: fill in your account code {0} into the memo field when creating the transaction, else we cannot pay out your Lumens!</value>
  </data>
  <data name="SellInitiateQRCode" xml:space="preserve">
    <value>QR-code of this transaction:</value>
  </data>
  <data name="SellInitiateQRCodeAddress" xml:space="preserve">
    <value>QR-code of this address:</value>
  </data>
  <data name="SellInitiateSendTextA" xml:space="preserve">
    <value>Send</value>
  </data>
  <data name="SellInitiateSendTextB" xml:space="preserve">
    <value>{0} to your sell address:</value>
  </data>
  <data name="SellInitiateTabTitle" xml:space="preserve">
    <value>Initiate {0} sell transaction</value>
  </data>
  <data name="SellInitiateText1" xml:space="preserve">
    <value>Your {0} price for this transaction has been locked in for the next {1} minutes, so you know exactly what your payout value will be. We advise you to continue your checkout without delay. You will receive a confirmation email with the financial transaction details after your {0} have been traded.</value>
  </data>
  <data name="SellInitiateText2" xml:space="preserve">
    <value>(If your transaction takes more than {1} minutes, your {0} price will be updated with the actual sell price at the time of receiving your {0}. In that case the payout value may differ slightly.)</value>
  </data>
  <data name="SellInitiateText3" xml:space="preserve">
    <value>Your payout value is an estimate based on the current sell price. The final sell price may differ slightly as it is updated by the actual price at the time of receiving your {0}. You will receive a confirmation email with the financial transaction details after your {0} are traded.</value>
  </data>
  <data name="SellInitiateTextNetworkFee" xml:space="preserve">
    <value>Please make sure that you execute your sell transaction with the right network fee for a quick confirmation of your transaction.</value>
  </data>
  <data name="SellInitiateTitle" xml:space="preserve">
    <value>Initiate {0} sell transaction</value>
  </data>
  <data name="SellInitiateTransactionAmount" xml:space="preserve">
    <value>Sell amount:</value>
  </data>
  <data name="SellInitiateTransactionCode" xml:space="preserve">
    <value>Transaction code:</value>
  </data>
  <data name="SellInitiateTransactionEstimate" xml:space="preserve">
    <value>Payout estimate:</value>
  </data>
  <data name="SellInitiateTransactionExchange" xml:space="preserve">
    <value>Selected exchange:</value>
  </data>
  <data name="SellInitiateTransactionPayout" xml:space="preserve">
    <value>Payout value:</value>
  </data>
  <data name="SellInitiateTransactionTimestamp" xml:space="preserve">
    <value>Transaction timestamp:</value>
  </data>
  <data name="SellInitiateTransactionTitle" xml:space="preserve">
    <value>Transaction details</value>
  </data>
  <data name="SellPageAddAddressDescription" xml:space="preserve">
    <value>Follow steps to add a new {0} address to an existing account.</value>
  </data>
  <data name="SellPageAddAddressLink" xml:space="preserve">
    <value>Add address</value>
  </data>
  <data name="SellPageAddAddressTitle" xml:space="preserve">
    <value>Add {0} address</value>
  </data>
  <data name="SellPageCreateAccountDescription" xml:space="preserve">
    <value>In 2 minutes you can create and activate your first account.</value>
  </data>
  <data name="SellPageCreateAccountLink" xml:space="preserve">
    <value>Get started</value>
  </data>
  <data name="SellPageCreateAccountTitle" xml:space="preserve">
    <value>Create new account</value>
  </data>
  <data name="SellPageExplainText1" xml:space="preserve">
    <value>When you initiate a Sell transaction through this page, the {0} price for your transaction will be locked in for a few minutes. We advise you to continue your checkout without delay. If your transaction takes more than the lock in period to finalise, your {0} price will be updated with the actual sell price at the time of receiving your {0}. In that case your payout may differ slightly.</value>
  </data>
  <data name="SellPageExplainText2" xml:space="preserve">
    <value>Alternatively if you don't use the Sell form on this page to lock your {0} price, your {0} will automatically be traded when the transaction is received.</value>
  </data>
  <data name="SellPageExplainText3" xml:space="preserve">
    <value>In either case you need to send your {0} from your wallet to the specific {0} address which is connected to your Account. You received this address when you created your Account. You can also view this address after clicking the Review Order button.</value>
  </data>
  <data name="SellPageExplainText4" xml:space="preserve">
    <value>Only send an amount of {0} within the limits of your Account. You can check your limits by submitting your Account Code above. If you send {0} in excess of your limits, the whole transaction (after your confirmation) will be returned to a return address connected to one of your Accounts (with deduction of a small {0} penalty to pay for transaction costs).</value>
  </data>
  <data name="SellPageExplainText5" xml:space="preserve">
    <value>After receiving at least 3 confirmations the payout procedure is initiated. When sending {0}, don't forget to add a network transaction fee for the miners. Otherwise confirmations can be slow and your payout might get delayed.</value>
  </data>
  <data name="SellPageExplainText6" xml:space="preserve">
    <value>The transaction costs consist of a service fee, a miners (network) fee and a bank fee. You will receive a confirmation email with the transaction details after your {0} have been traded. The payout procedure of the resulting funds to your bank account runs every working day at 12:00 for all European banks.</value>
  </data>
  <data name="SellPageListText11" xml:space="preserve">
    <value>Dutch bank account.</value>
  </data>
  <data name="SellPageListText12" xml:space="preserve">
    <value>Bank account with any bank in the Single European Payments Area (SEPA).</value>
  </data>
  <data name="SellPageListText21" xml:space="preserve">
    <value>Funds on your bank account same day.</value>
  </data>
  <data name="SellPageListText22" xml:space="preserve">
    <value>Funds on your bank account within 1-3 working days (depending on bank).</value>
  </data>
  <data name="SellPageListText31" xml:space="preserve">
    <value>Funds on your bank account next working day.</value>
  </data>
  <data name="SellPageListText32" xml:space="preserve">
    <value>Funds on your bank account within 1-3 working days (depending on bank).</value>
  </data>
  <data name="SellPageListTitle1" xml:space="preserve">
    <value>Payout schedule</value>
  </data>
  <data name="SellPageListTitle2" xml:space="preserve">
    <value>{0} received and confirmed on working days before 12:00 CET</value>
  </data>
  <data name="SellPageListTitle3" xml:space="preserve">
    <value>{0} received and confirmed on working days after 12:00 CET or weekend/holidays</value>
  </data>
  <data name="SellPageReturnSuccessTabTitle" xml:space="preserve">
    <value>{0} return address successful confirmed</value>
  </data>
  <data name="SellPageReturnTabTitle" xml:space="preserve">
    <value>Returning your {0}</value>
  </data>
  <data name="SellPageServiceNotAvailable" xml:space="preserve">
    <value>Sell service temporary not available.</value>
  </data>
  <data name="SellPageTabTitle" xml:space="preserve">
    <value>Sell {0}</value>
  </data>
  <data name="SellPageTitle" xml:space="preserve">
    <value>Let's sell</value>
  </data>
</root>